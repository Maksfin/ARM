 // Fonts generator
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
	$src: null;

	$extmods: (
		eot: "?",
		svg: "#" + str-replace($name, " ", "_")
	);

	$formats: (
		otf: "opentype",
		ttf: "truetype"
	);

	@each $ext in $exts {
		$extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
		$format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
		$src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
	}

	@font-face {
		font-family: quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}

 // Inline-block
@mixin inlineblock ($value: top){
	display: inline-block;
	vertical-align: $value;
}

// Absolute centered
@mixin center {
	position: absolute;
	top: 0;
	right: 0;
	left: 0;
	bottom: 0;
	margin: auto;
}

// Clearfix
@mixin clearfix{

	&:before,
	&:after {
		content: "";
		display: table;
	}

	&:after {
		clear:both;
	}
}


// Color placeholder
@mixin placeholder($text-indent, $transition: .2s, $font: 14px, $color: #c7c6c6) {
    &::-webkit-input-placeholder {
        color: $color;
        font-size: $font;
        text-indent: $text-indent;
        @include transition($transition);

    }
    &:-moz-placeholder {
        color: $color;
        font-size: $font;
        text-indent: $text-indent;
        @include transition($transition);

    }
    &::-moz-placeholder {
        color: $color;
        font-size: $font;
        text-indent: $text-indent;
        @include transition($transition);

    }
    &:-ms-input-placeholder {
        color: $color;
        font-size: $font;
        text-indent: $text-indent;
        @include transition($transition);

    }
}

@mixin border-radius ($radius: 5px) {
	-webkit-border-radius: $radius;
	-moz-border-radius:    $radius;
	border-radius:         $radius;

	-moz-background-clip:    padding;
	-webkit-background-clip: padding-box;
	background-clip:         padding-box;
}

@mixin box-shadow ($string...) {
	-webkit-box-shadow: $string;
	-moz-box-shadow:    $string;
	box-shadow:         $string;
}

@mixin transition ($transition...) {
	-webkit-transition: $transition;
	-moz-transition:    $transition;
	-ms-transition:     $transition;
	-o-transition:      $transition;
	transition:      $transition;
}

@mixin transform ($transform...) {
	-webkit-transform: $transform;
	-moz-transform:    $transform;
	-ms-transform:     $transform;
	-o-transform:      $transform;
	transform:      $transform;
}

@mixin transformPos ($axis: "both") {
  position: absolute;
  @if $axis == "y" {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    -o-transform: translateY(-50%);
    transform: translateY(-50%);
  }
  @if $axis == "x" {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -moz-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    -o-transform: translateX(-50%);
    transform: translateX(-50%);
  }
  @if $axis == "both" {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -moz-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    -o-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

@mixin linearGradient($top, $bottom, $offset: top){
    background: $top; /* Old browsers */
    background: -moz-linear-gradient($offset,  $top 0%, $bottom 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient($offset,  $top 0%,$bottom 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient($offset,  $top 0%,$bottom 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient($offset,  $top 0%,$bottom 100%); /* IE10+ */
    background: linear-gradient(to top,  $top 0%, $bottom 100%); /* W3C */
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr=$top, endColorstr=$bottom,GradientType=0 ); /* IE6-9 */
}

// Sprite generator
@mixin get-sprite ($map, $sprite, $repeat: no-repeat, $height: true, $width: true) {
	$sprite-image: sprite-file($map, $sprite);
	$sprite-map: sprite-url($map);
	$sprite-position: sprite-position($map, $sprite);
	$sprite-layout: smart;

	background: $sprite-map $sprite-position no-repeat;

	@if ($height == true) {
		$sprite-height: image-height($sprite-image);
	 	height: $sprite-height;
	}

	@if ($width == true) {
		$sprite-width: image-width($sprite-image);
		width: $sprite-width;
	}
}

// Responsive units REM
@mixin fontSize($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

// Media queries
@mixin media ($max-width: 1200px) {
	@media (max-width: $max-width) {
		@content
	}
}

// Responsive units EM
@function em($target, $context: $base-font-size) {
	@if $target == 0 { @return 0 }
	@return $target / $context + 0em;
}

/*-------------------    Transfer from PX in REM   ------------------------*/
$rem-baseline: 16px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
@function rem-separator($list) {
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}


/* -------------------------    SVG SPRITES      -------------------------*/
@import '../img/icons/src/_sprite';


@function mq-px2rem($px, $rem-baseline: 16px) {
    @if unitless($px) {
        @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
        @return mq-px2rem($px + 0px); // That may fail.
    } @else if unit($px) == rem {
        @return $px;
    }
    @return ($px / $rem-baseline) * 1rem;
}


// Устанавливает переменную для основных данных спрайта (путь файла, размеры и др.)
$sprite: map-get($icons, sprite) !default;


// Получение атрибутов из sass карты
@function sprite-attr($icon, $attr) {
    $icon: map-get($icons, $icon);
    @return map-get($icon, $attr);
}

@function icon-attr($icon) {
    $attr: (
        width: sprite-attr($icon, width),
        height: sprite-attr($icon, height),
        x: sprite-attr($icon, backgroundX),
        y: sprite-attr($icon, backgroundY)
    );

    @return $attr;
}

// Установка фона и размера
%sprite {
    display: inline-block;
    background-image: url(map-get($sprite, svgPath));
    background-size: mq-px2rem(map-get($sprite, width)) mq-px2rem(map-get($sprite, height));
}

// Для использования с gulp спрайт плагином
@mixin sprite($icon, $type: all) {
    @if $type == all {
        // Shares the backgrounds
        @extend %sprite;
    }

    $iconMap: icon-attr($icon);

    // Вывод размеров в rem
    @if $type == all or $type == size {
        width: mq-px2rem(map-get($iconMap, width) + 1);
        height: mq-px2rem(map-get($iconMap, height) + 1);
    }

    // Вывод положения фона в rem
    @if $type == all or $type == bg {
        background-position: mq-px2rem(map-get($iconMap, x)) mq-px2rem(map-get($iconMap, y));
    }

}